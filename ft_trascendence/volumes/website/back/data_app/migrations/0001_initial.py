# Generated by Django 4.2.5 on 2024-03-29 17:22

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=17, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator('Email invalid. Enter a valid email address')])),
                ('password', models.CharField(validators=[django.core.validators.RegexValidator(message='Enter a valid password. It must be at least 8 characters long, include at least one uppercase letter, one number and one special character.', regex='^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?.&])[A-Za-z\\d@$!%*?&]{8,}$')])),
                ('is_online', models.BooleanField(default=False)),
                ('message', models.CharField(blank=True, default='', max_length=50)),
                ('elo', models.IntegerField(default=1000)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('scientist', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0), django.core.validators.MaxValueValidator(limit_value=5)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.JSONField()),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='MatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.CharField(max_length=10)),
                ('mode', models.CharField(choices=[('1v1', '1 versus 1'), ('2v2', '2 versus 2')], max_length=5)),
                ('date', models.DateField()),
                ('ai', models.BooleanField(default=False)),
                ('loser_id1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loser_id1', to=settings.AUTH_USER_MODEL)),
                ('loser_id2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loser_id2', to=settings.AUTH_USER_MODEL)),
                ('loser_id3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loser_id3', to=settings.AUTH_USER_MODEL)),
                ('winner_id1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner_id1', to=settings.AUTH_USER_MODEL)),
                ('winner_id2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner_id2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Amigo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('matched', models.BooleanField()),
                ('id1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='id1', to=settings.AUTH_USER_MODEL)),
                ('id2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='id2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
